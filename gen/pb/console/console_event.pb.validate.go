// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/console_event.proto

package console

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventRequestMultiError, or nil if none found.
func (m *CreateEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 60 {
		err := CreateEventRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 60 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSummary()) > 160 {
		err := CreateEventRequestValidationError{
			field:  "Summary",
			reason: "value length must be at most 160 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetVisibility() != "" {

		if _, ok := _CreateEventRequest_Visibility_InLookup[m.GetVisibility()]; !ok {
			err := CreateEventRequestValidationError{
				field:  "Visibility",
				reason: "value must be in list [public private]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetCoverImageUrl() != "" {

		if uri, err := url.Parse(m.GetCoverImageUrl()); err != nil {
			err = CreateEventRequestValidationError{
				field:  "CoverImageUrl",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := CreateEventRequestValidationError{
				field:  "CoverImageUrl",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetSessions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEventRequestValidationError{
						field:  fmt.Sprintf("Sessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEventRequestValidationError{
						field:  fmt.Sprintf("Sessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEventRequestValidationError{
					field:  fmt.Sprintf("Sessions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetDetail()) > 50 {
		err := CreateEventRequestValidationError{
			field:  "Detail",
			reason: "value must contain no more than 50 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDetail() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEventRequestValidationError{
						field:  fmt.Sprintf("Detail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEventRequestValidationError{
						field:  fmt.Sprintf("Detail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEventRequestValidationError{
					field:  fmt.Sprintf("Detail[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetFaq()) > 20 {
		err := CreateEventRequestValidationError{
			field:  "Faq",
			reason: "value must contain no more than 20 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFaq() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEventRequestValidationError{
						field:  fmt.Sprintf("Faq[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEventRequestValidationError{
						field:  fmt.Sprintf("Faq[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEventRequestValidationError{
					field:  fmt.Sprintf("Faq[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEventRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEventRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEventRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateEventRequestMultiError(errors)
	}

	return nil
}

// CreateEventRequestMultiError is an error wrapping multiple validation errors
// returned by CreateEventRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventRequestMultiError) AllErrors() []error { return m }

// CreateEventRequestValidationError is the validation error returned by
// CreateEventRequest.Validate if the designated constraints aren't met.
type CreateEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventRequestValidationError) ErrorName() string {
	return "CreateEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventRequestValidationError{}

var _CreateEventRequest_Visibility_InLookup = map[string]struct{}{
	"public":  {},
	"private": {},
}

// Validate checks the field values on GetEventListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEventListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventListRequestMultiError, or nil if none found.
func (m *GetEventListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.Page != nil {

		if m.GetPage() < 1 {
			err := GetEventListRequestValidationError{
				field:  "Page",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.PageSize != nil {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := GetEventListRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {

		if m.GetStatus() != "" {

			if _, ok := _GetEventListRequest_Status_InLookup[m.GetStatus()]; !ok {
				err := GetEventListRequestValidationError{
					field:  "Status",
					reason: "value must be in list [draft published archived]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Visibility != nil {

		if m.GetVisibility() != "" {

			if _, ok := _GetEventListRequest_Visibility_InLookup[m.GetVisibility()]; !ok {
				err := GetEventListRequestValidationError{
					field:  "Visibility",
					reason: "value must be in list [public private]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.SessionStartTimeFrom != nil {
		// no validation rules for SessionStartTimeFrom
	}

	if m.SessionStartTimeTo != nil {
		// no validation rules for SessionStartTimeTo
	}

	if m.TitleSearch != nil {
		// no validation rules for TitleSearch
	}

	if m.SortBy != nil {

		if m.GetSortBy() != "" {

			if _, ok := _GetEventListRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
				err := GetEventListRequestValidationError{
					field:  "SortBy",
					reason: "value must be in list [created_at updated_at session_start_time]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.SortOrder != nil {

		if m.GetSortOrder() != "" {

			if _, ok := _GetEventListRequest_SortOrder_InLookup[m.GetSortOrder()]; !ok {
				err := GetEventListRequestValidationError{
					field:  "SortOrder",
					reason: "value must be in list [asc desc]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return GetEventListRequestMultiError(errors)
	}

	return nil
}

// GetEventListRequestMultiError is an error wrapping multiple validation
// errors returned by GetEventListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEventListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventListRequestMultiError) AllErrors() []error { return m }

// GetEventListRequestValidationError is the validation error returned by
// GetEventListRequest.Validate if the designated constraints aren't met.
type GetEventListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventListRequestValidationError) ErrorName() string {
	return "GetEventListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventListRequestValidationError{}

var _GetEventListRequest_Status_InLookup = map[string]struct{}{
	"draft":     {},
	"published": {},
	"archived":  {},
}

var _GetEventListRequest_Visibility_InLookup = map[string]struct{}{
	"public":  {},
	"private": {},
}

var _GetEventListRequest_SortBy_InLookup = map[string]struct{}{
	"created_at":         {},
	"updated_at":         {},
	"session_start_time": {},
}

var _GetEventListRequest_SortOrder_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on PatchEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PatchEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchEventRequestMultiError, or nil if none found.
func (m *PatchEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PatchEventRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSessions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PatchEventRequestValidationError{
						field:  fmt.Sprintf("Sessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PatchEventRequestValidationError{
						field:  fmt.Sprintf("Sessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PatchEventRequestValidationError{
					field:  fmt.Sprintf("Sessions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetDetail()) > 50 {
		err := PatchEventRequestValidationError{
			field:  "Detail",
			reason: "value must contain no more than 50 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDetail() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PatchEventRequestValidationError{
						field:  fmt.Sprintf("Detail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PatchEventRequestValidationError{
						field:  fmt.Sprintf("Detail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PatchEventRequestValidationError{
					field:  fmt.Sprintf("Detail[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetFaq()) > 20 {
		err := PatchEventRequestValidationError{
			field:  "Faq",
			reason: "value must contain no more than 20 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFaq() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PatchEventRequestValidationError{
						field:  fmt.Sprintf("Faq[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PatchEventRequestValidationError{
						field:  fmt.Sprintf("Faq[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PatchEventRequestValidationError{
					field:  fmt.Sprintf("Faq[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Title != nil {

		if m.GetTitle() != "" {

			if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 60 {
				err := PatchEventRequestValidationError{
					field:  "Title",
					reason: "value length must be between 1 and 60 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Summary != nil {

		if m.GetSummary() != "" {

			if utf8.RuneCountInString(m.GetSummary()) > 160 {
				err := PatchEventRequestValidationError{
					field:  "Summary",
					reason: "value length must be at most 160 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Visibility != nil {

		if m.GetVisibility() != "" {

			if _, ok := _PatchEventRequest_Visibility_InLookup[m.GetVisibility()]; !ok {
				err := PatchEventRequestValidationError{
					field:  "Visibility",
					reason: "value must be in list [public private]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.CoverImageUrl != nil {

		if m.GetCoverImageUrl() != "" {

			if uri, err := url.Parse(m.GetCoverImageUrl()); err != nil {
				err = PatchEventRequestValidationError{
					field:  "CoverImageUrl",
					reason: "value must be a valid URI",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else if !uri.IsAbs() {
				err := PatchEventRequestValidationError{
					field:  "CoverImageUrl",
					reason: "value must be absolute",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PatchEventRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PatchEventRequestValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PatchEventRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PatchEventRequestMultiError(errors)
	}

	return nil
}

// PatchEventRequestMultiError is an error wrapping multiple validation errors
// returned by PatchEventRequest.ValidateAll() if the designated constraints
// aren't met.
type PatchEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchEventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchEventRequestMultiError) AllErrors() []error { return m }

// PatchEventRequestValidationError is the validation error returned by
// PatchEventRequest.Validate if the designated constraints aren't met.
type PatchEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchEventRequestValidationError) ErrorName() string {
	return "PatchEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchEventRequestValidationError{}

var _PatchEventRequest_Visibility_InLookup = map[string]struct{}{
	"public":  {},
	"private": {},
}

// Validate checks the field values on UpdateEventStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEventStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEventStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEventStatusRequestMultiError, or nil if none found.
func (m *UpdateEventStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEventStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateEventStatusRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateEventStatusRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := UpdateEventStatusRequestValidationError{
			field:  "Status",
			reason: "value must be in list [draft published archived]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateEventStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateEventStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEventStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEventStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEventStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEventStatusRequestMultiError) AllErrors() []error { return m }

// UpdateEventStatusRequestValidationError is the validation error returned by
// UpdateEventStatusRequest.Validate if the designated constraints aren't met.
type UpdateEventStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventStatusRequestValidationError) ErrorName() string {
	return "UpdateEventStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventStatusRequestValidationError{}

var _UpdateEventStatusRequest_Status_InLookup = map[string]struct{}{
	"draft":     {},
	"published": {},
	"archived":  {},
}

// Validate checks the field values on DeleteSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSessionRequestMultiError, or nil if none found.
func (m *DeleteSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteSessionRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSessionId()) < 1 {
		err := DeleteSessionRequestValidationError{
			field:  "SessionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSessionRequestMultiError(errors)
	}

	return nil
}

// DeleteSessionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSessionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSessionRequestMultiError) AllErrors() []error { return m }

// DeleteSessionRequestValidationError is the validation error returned by
// DeleteSessionRequest.Validate if the designated constraints aren't met.
type DeleteSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSessionRequestValidationError) ErrorName() string {
	return "DeleteSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSessionRequestValidationError{}

// Validate checks the field values on CreateEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventResponseMultiError, or nil if none found.
func (m *CreateEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return CreateEventResponseMultiError(errors)
	}

	return nil
}

// CreateEventResponseMultiError is an error wrapping multiple validation
// errors returned by CreateEventResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventResponseMultiError) AllErrors() []error { return m }

// CreateEventResponseValidationError is the validation error returned by
// CreateEventResponse.Validate if the designated constraints aren't met.
type CreateEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventResponseValidationError) ErrorName() string {
	return "CreateEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventResponseValidationError{}
