// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/form_service.proto

package form

import (
	context "context"
	common "github.com/arwoosa/form-service/gen/pb/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FormService_CreateFormTemplate_FullMethodName    = "/form.service.FormService/CreateFormTemplate"
	FormService_ListFormTemplates_FullMethodName     = "/form.service.FormService/ListFormTemplates"
	FormService_GetFormTemplate_FullMethodName       = "/form.service.FormService/GetFormTemplate"
	FormService_UpdateFormTemplate_FullMethodName    = "/form.service.FormService/UpdateFormTemplate"
	FormService_DeleteFormTemplate_FullMethodName    = "/form.service.FormService/DeleteFormTemplate"
	FormService_DuplicateFormTemplate_FullMethodName = "/form.service.FormService/DuplicateFormTemplate"
	FormService_CreateForm_FullMethodName            = "/form.service.FormService/CreateForm"
	FormService_ListForms_FullMethodName             = "/form.service.FormService/ListForms"
	FormService_GetForm_FullMethodName               = "/form.service.FormService/GetForm"
	FormService_UpdateForm_FullMethodName            = "/form.service.FormService/UpdateForm"
	FormService_DeleteForm_FullMethodName            = "/form.service.FormService/DeleteForm"
)

// FormServiceClient is the client API for FormService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormServiceClient interface {
	// Creates a new form template
	CreateFormTemplate(ctx context.Context, in *CreateFormTemplateRequest, opts ...grpc.CallOption) (*CreateFormTemplateResponse, error)
	// Lists form templates with pagination
	ListFormTemplates(ctx context.Context, in *ListFormTemplatesRequest, opts ...grpc.CallOption) (*ListFormTemplatesResponse, error)
	// Gets a single form template by ID
	GetFormTemplate(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*FormTemplate, error)
	// Updates an existing form template
	UpdateFormTemplate(ctx context.Context, in *UpdateFormTemplateRequest, opts ...grpc.CallOption) (*FormTemplate, error)
	// Deletes a form template by ID
	DeleteFormTemplate(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Duplicates an existing form template
	DuplicateFormTemplate(ctx context.Context, in *DuplicateFormTemplateRequest, opts ...grpc.CallOption) (*DuplicateFormTemplateResponse, error)
	// Creates a new form, either from a template or standalone
	CreateForm(ctx context.Context, in *CreateFormRequest, opts ...grpc.CallOption) (*CreateFormResponse, error)
	// Lists forms with pagination
	ListForms(ctx context.Context, in *ListFormsRequest, opts ...grpc.CallOption) (*ListFormsResponse, error)
	// Gets a single form by ID
	GetForm(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*Form, error)
	// Updates an existing form
	UpdateForm(ctx context.Context, in *UpdateFormRequest, opts ...grpc.CallOption) (*Form, error)
	// Deletes a form by ID
	DeleteForm(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type formServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFormServiceClient(cc grpc.ClientConnInterface) FormServiceClient {
	return &formServiceClient{cc}
}

func (c *formServiceClient) CreateFormTemplate(ctx context.Context, in *CreateFormTemplateRequest, opts ...grpc.CallOption) (*CreateFormTemplateResponse, error) {
	out := new(CreateFormTemplateResponse)
	err := c.cc.Invoke(ctx, FormService_CreateFormTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) ListFormTemplates(ctx context.Context, in *ListFormTemplatesRequest, opts ...grpc.CallOption) (*ListFormTemplatesResponse, error) {
	out := new(ListFormTemplatesResponse)
	err := c.cc.Invoke(ctx, FormService_ListFormTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) GetFormTemplate(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*FormTemplate, error) {
	out := new(FormTemplate)
	err := c.cc.Invoke(ctx, FormService_GetFormTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) UpdateFormTemplate(ctx context.Context, in *UpdateFormTemplateRequest, opts ...grpc.CallOption) (*FormTemplate, error) {
	out := new(FormTemplate)
	err := c.cc.Invoke(ctx, FormService_UpdateFormTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) DeleteFormTemplate(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FormService_DeleteFormTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) DuplicateFormTemplate(ctx context.Context, in *DuplicateFormTemplateRequest, opts ...grpc.CallOption) (*DuplicateFormTemplateResponse, error) {
	out := new(DuplicateFormTemplateResponse)
	err := c.cc.Invoke(ctx, FormService_DuplicateFormTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) CreateForm(ctx context.Context, in *CreateFormRequest, opts ...grpc.CallOption) (*CreateFormResponse, error) {
	out := new(CreateFormResponse)
	err := c.cc.Invoke(ctx, FormService_CreateForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) ListForms(ctx context.Context, in *ListFormsRequest, opts ...grpc.CallOption) (*ListFormsResponse, error) {
	out := new(ListFormsResponse)
	err := c.cc.Invoke(ctx, FormService_ListForms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) GetForm(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*Form, error) {
	out := new(Form)
	err := c.cc.Invoke(ctx, FormService_GetForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) UpdateForm(ctx context.Context, in *UpdateFormRequest, opts ...grpc.CallOption) (*Form, error) {
	out := new(Form)
	err := c.cc.Invoke(ctx, FormService_UpdateForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formServiceClient) DeleteForm(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FormService_DeleteForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormServiceServer is the server API for FormService service.
// All implementations must embed UnimplementedFormServiceServer
// for forward compatibility
type FormServiceServer interface {
	// Creates a new form template
	CreateFormTemplate(context.Context, *CreateFormTemplateRequest) (*CreateFormTemplateResponse, error)
	// Lists form templates with pagination
	ListFormTemplates(context.Context, *ListFormTemplatesRequest) (*ListFormTemplatesResponse, error)
	// Gets a single form template by ID
	GetFormTemplate(context.Context, *common.ID) (*FormTemplate, error)
	// Updates an existing form template
	UpdateFormTemplate(context.Context, *UpdateFormTemplateRequest) (*FormTemplate, error)
	// Deletes a form template by ID
	DeleteFormTemplate(context.Context, *common.ID) (*emptypb.Empty, error)
	// Duplicates an existing form template
	DuplicateFormTemplate(context.Context, *DuplicateFormTemplateRequest) (*DuplicateFormTemplateResponse, error)
	// Creates a new form, either from a template or standalone
	CreateForm(context.Context, *CreateFormRequest) (*CreateFormResponse, error)
	// Lists forms with pagination
	ListForms(context.Context, *ListFormsRequest) (*ListFormsResponse, error)
	// Gets a single form by ID
	GetForm(context.Context, *common.ID) (*Form, error)
	// Updates an existing form
	UpdateForm(context.Context, *UpdateFormRequest) (*Form, error)
	// Deletes a form by ID
	DeleteForm(context.Context, *common.ID) (*emptypb.Empty, error)
	mustEmbedUnimplementedFormServiceServer()
}

// UnimplementedFormServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFormServiceServer struct {
}

func (UnimplementedFormServiceServer) CreateFormTemplate(context.Context, *CreateFormTemplateRequest) (*CreateFormTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFormTemplate not implemented")
}
func (UnimplementedFormServiceServer) ListFormTemplates(context.Context, *ListFormTemplatesRequest) (*ListFormTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFormTemplates not implemented")
}
func (UnimplementedFormServiceServer) GetFormTemplate(context.Context, *common.ID) (*FormTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormTemplate not implemented")
}
func (UnimplementedFormServiceServer) UpdateFormTemplate(context.Context, *UpdateFormTemplateRequest) (*FormTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFormTemplate not implemented")
}
func (UnimplementedFormServiceServer) DeleteFormTemplate(context.Context, *common.ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFormTemplate not implemented")
}
func (UnimplementedFormServiceServer) DuplicateFormTemplate(context.Context, *DuplicateFormTemplateRequest) (*DuplicateFormTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateFormTemplate not implemented")
}
func (UnimplementedFormServiceServer) CreateForm(context.Context, *CreateFormRequest) (*CreateFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForm not implemented")
}
func (UnimplementedFormServiceServer) ListForms(context.Context, *ListFormsRequest) (*ListFormsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListForms not implemented")
}
func (UnimplementedFormServiceServer) GetForm(context.Context, *common.ID) (*Form, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForm not implemented")
}
func (UnimplementedFormServiceServer) UpdateForm(context.Context, *UpdateFormRequest) (*Form, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForm not implemented")
}
func (UnimplementedFormServiceServer) DeleteForm(context.Context, *common.ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForm not implemented")
}
func (UnimplementedFormServiceServer) mustEmbedUnimplementedFormServiceServer() {}

// UnsafeFormServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormServiceServer will
// result in compilation errors.
type UnsafeFormServiceServer interface {
	mustEmbedUnimplementedFormServiceServer()
}

func RegisterFormServiceServer(s grpc.ServiceRegistrar, srv FormServiceServer) {
	s.RegisterService(&FormService_ServiceDesc, srv)
}

func _FormService_CreateFormTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFormTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).CreateFormTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_CreateFormTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).CreateFormTemplate(ctx, req.(*CreateFormTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_ListFormTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFormTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).ListFormTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_ListFormTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).ListFormTemplates(ctx, req.(*ListFormTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_GetFormTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).GetFormTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_GetFormTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).GetFormTemplate(ctx, req.(*common.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_UpdateFormTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFormTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).UpdateFormTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_UpdateFormTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).UpdateFormTemplate(ctx, req.(*UpdateFormTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_DeleteFormTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).DeleteFormTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_DeleteFormTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).DeleteFormTemplate(ctx, req.(*common.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_DuplicateFormTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateFormTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).DuplicateFormTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_DuplicateFormTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).DuplicateFormTemplate(ctx, req.(*DuplicateFormTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_CreateForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).CreateForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_CreateForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).CreateForm(ctx, req.(*CreateFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_ListForms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFormsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).ListForms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_ListForms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).ListForms(ctx, req.(*ListFormsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_GetForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).GetForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_GetForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).GetForm(ctx, req.(*common.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_UpdateForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).UpdateForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_UpdateForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).UpdateForm(ctx, req.(*UpdateFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormService_DeleteForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormServiceServer).DeleteForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormService_DeleteForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormServiceServer).DeleteForm(ctx, req.(*common.ID))
	}
	return interceptor(ctx, in, info, handler)
}

// FormService_ServiceDesc is the grpc.ServiceDesc for FormService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FormService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "form.service.FormService",
	HandlerType: (*FormServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFormTemplate",
			Handler:    _FormService_CreateFormTemplate_Handler,
		},
		{
			MethodName: "ListFormTemplates",
			Handler:    _FormService_ListFormTemplates_Handler,
		},
		{
			MethodName: "GetFormTemplate",
			Handler:    _FormService_GetFormTemplate_Handler,
		},
		{
			MethodName: "UpdateFormTemplate",
			Handler:    _FormService_UpdateFormTemplate_Handler,
		},
		{
			MethodName: "DeleteFormTemplate",
			Handler:    _FormService_DeleteFormTemplate_Handler,
		},
		{
			MethodName: "DuplicateFormTemplate",
			Handler:    _FormService_DuplicateFormTemplate_Handler,
		},
		{
			MethodName: "CreateForm",
			Handler:    _FormService_CreateForm_Handler,
		},
		{
			MethodName: "ListForms",
			Handler:    _FormService_ListForms_Handler,
		},
		{
			MethodName: "GetForm",
			Handler:    _FormService_GetForm_Handler,
		},
		{
			MethodName: "UpdateForm",
			Handler:    _FormService_UpdateForm_Handler,
		},
		{
			MethodName: "DeleteForm",
			Handler:    _FormService_DeleteForm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/form_service.proto",
}
