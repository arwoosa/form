// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/form_service.proto

package form

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FormTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FormTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FormTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FormTemplateMultiError, or
// nil if none found.
func (m *FormTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *FormTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for MerchantId

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormTemplateValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormTemplateValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormTemplateValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUischema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormTemplateValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormTemplateValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUischema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormTemplateValidationError{
				field:  "Uischema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormTemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormTemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormTemplateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedBy

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormTemplateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormTemplateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormTemplateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedBy

	if len(errors) > 0 {
		return FormTemplateMultiError(errors)
	}

	return nil
}

// FormTemplateMultiError is an error wrapping multiple validation errors
// returned by FormTemplate.ValidateAll() if the designated constraints aren't met.
type FormTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormTemplateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormTemplateMultiError) AllErrors() []error { return m }

// FormTemplateValidationError is the validation error returned by
// FormTemplate.Validate if the designated constraints aren't met.
type FormTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormTemplateValidationError) ErrorName() string { return "FormTemplateValidationError" }

// Error satisfies the builtin error interface
func (e FormTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFormTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormTemplateValidationError{}

// Validate checks the field values on CreateFormTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFormTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFormTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFormTemplateRequestMultiError, or nil if none found.
func (m *CreateFormTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFormTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := CreateFormTemplateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 140 {
		err := CreateFormTemplateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 140 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSchema() == nil {
		err := CreateFormTemplateRequestValidationError{
			field:  "Schema",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFormTemplateRequestValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFormTemplateRequestValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFormTemplateRequestValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUischema() == nil {
		err := CreateFormTemplateRequestValidationError{
			field:  "Uischema",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUischema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFormTemplateRequestValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFormTemplateRequestValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUischema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFormTemplateRequestValidationError{
				field:  "Uischema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFormTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateFormTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateFormTemplateRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateFormTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFormTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFormTemplateRequestMultiError) AllErrors() []error { return m }

// CreateFormTemplateRequestValidationError is the validation error returned by
// CreateFormTemplateRequest.Validate if the designated constraints aren't met.
type CreateFormTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFormTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFormTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFormTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFormTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFormTemplateRequestValidationError) ErrorName() string {
	return "CreateFormTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFormTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFormTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFormTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFormTemplateRequestValidationError{}

// Validate checks the field values on CreateFormTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFormTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFormTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFormTemplateResponseMultiError, or nil if none found.
func (m *CreateFormTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFormTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFormTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFormTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFormTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFormTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateFormTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by CreateFormTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateFormTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFormTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFormTemplateResponseMultiError) AllErrors() []error { return m }

// CreateFormTemplateResponseValidationError is the validation error returned
// by CreateFormTemplateResponse.Validate if the designated constraints aren't met.
type CreateFormTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFormTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFormTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFormTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFormTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFormTemplateResponseValidationError) ErrorName() string {
	return "CreateFormTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFormTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFormTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFormTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFormTemplateResponseValidationError{}

// Validate checks the field values on ListFormTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFormTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormTemplatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormTemplatesRequestMultiError, or nil if none found.
func (m *ListFormTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListFormTemplatesRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListFormTemplatesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListFormTemplatesRequestMultiError(errors)
	}

	return nil
}

// ListFormTemplatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListFormTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFormTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormTemplatesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormTemplatesRequestMultiError) AllErrors() []error { return m }

// ListFormTemplatesRequestValidationError is the validation error returned by
// ListFormTemplatesRequest.Validate if the designated constraints aren't met.
type ListFormTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormTemplatesRequestValidationError) ErrorName() string {
	return "ListFormTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFormTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormTemplatesRequestValidationError{}

// Validate checks the field values on ListFormTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFormTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormTemplatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormTemplatesResponseMultiError, or nil if none found.
func (m *ListFormTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFormTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFormTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFormTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFormTemplatesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFormTemplatesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFormTemplatesResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListFormTemplatesResponseMultiError(errors)
	}

	return nil
}

// ListFormTemplatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListFormTemplatesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListFormTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormTemplatesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormTemplatesResponseMultiError) AllErrors() []error { return m }

// ListFormTemplatesResponseValidationError is the validation error returned by
// ListFormTemplatesResponse.Validate if the designated constraints aren't met.
type ListFormTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormTemplatesResponseValidationError) ErrorName() string {
	return "ListFormTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFormTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormTemplatesResponseValidationError{}

// Validate checks the field values on UpdateFormTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFormTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFormTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFormTemplateRequestMultiError, or nil if none found.
func (m *UpdateFormTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFormTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateFormTemplateRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := UpdateFormTemplateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 140 {
		err := UpdateFormTemplateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 140 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSchema() == nil {
		err := UpdateFormTemplateRequestValidationError{
			field:  "Schema",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFormTemplateRequestValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFormTemplateRequestValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFormTemplateRequestValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUischema() == nil {
		err := UpdateFormTemplateRequestValidationError{
			field:  "Uischema",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUischema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFormTemplateRequestValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFormTemplateRequestValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUischema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFormTemplateRequestValidationError{
				field:  "Uischema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFormTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateFormTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFormTemplateRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateFormTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFormTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFormTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateFormTemplateRequestValidationError is the validation error returned by
// UpdateFormTemplateRequest.Validate if the designated constraints aren't met.
type UpdateFormTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFormTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFormTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFormTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFormTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFormTemplateRequestValidationError) ErrorName() string {
	return "UpdateFormTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFormTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFormTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFormTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFormTemplateRequestValidationError{}

// Validate checks the field values on DuplicateFormTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DuplicateFormTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DuplicateFormTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DuplicateFormTemplateRequestMultiError, or nil if none found.
func (m *DuplicateFormTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DuplicateFormTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DuplicateFormTemplateRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DuplicateFormTemplateRequestMultiError(errors)
	}

	return nil
}

// DuplicateFormTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by DuplicateFormTemplateRequest.ValidateAll() if
// the designated constraints aren't met.
type DuplicateFormTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DuplicateFormTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DuplicateFormTemplateRequestMultiError) AllErrors() []error { return m }

// DuplicateFormTemplateRequestValidationError is the validation error returned
// by DuplicateFormTemplateRequest.Validate if the designated constraints
// aren't met.
type DuplicateFormTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DuplicateFormTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DuplicateFormTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DuplicateFormTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DuplicateFormTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DuplicateFormTemplateRequestValidationError) ErrorName() string {
	return "DuplicateFormTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DuplicateFormTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDuplicateFormTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DuplicateFormTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DuplicateFormTemplateRequestValidationError{}

// Validate checks the field values on DuplicateFormTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DuplicateFormTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DuplicateFormTemplateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DuplicateFormTemplateResponseMultiError, or nil if none found.
func (m *DuplicateFormTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DuplicateFormTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DuplicateFormTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DuplicateFormTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DuplicateFormTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DuplicateFormTemplateResponseMultiError(errors)
	}

	return nil
}

// DuplicateFormTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by DuplicateFormTemplateResponse.ValidateAll()
// if the designated constraints aren't met.
type DuplicateFormTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DuplicateFormTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DuplicateFormTemplateResponseMultiError) AllErrors() []error { return m }

// DuplicateFormTemplateResponseValidationError is the validation error
// returned by DuplicateFormTemplateResponse.Validate if the designated
// constraints aren't met.
type DuplicateFormTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DuplicateFormTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DuplicateFormTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DuplicateFormTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DuplicateFormTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DuplicateFormTemplateResponseValidationError) ErrorName() string {
	return "DuplicateFormTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DuplicateFormTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDuplicateFormTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DuplicateFormTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DuplicateFormTemplateResponseValidationError{}

// Validate checks the field values on Form with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Form) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Form with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FormMultiError, or nil if none found.
func (m *Form) ValidateAll() error {
	return m.validate(true)
}

func (m *Form) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for EventId

	// no validation rules for MerchantId

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUischema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUischema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormValidationError{
				field:  "Uischema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedBy

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FormValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FormValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedBy

	if len(errors) > 0 {
		return FormMultiError(errors)
	}

	return nil
}

// FormMultiError is an error wrapping multiple validation errors returned by
// Form.ValidateAll() if the designated constraints aren't met.
type FormMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FormMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FormMultiError) AllErrors() []error { return m }

// FormValidationError is the validation error returned by Form.Validate if the
// designated constraints aren't met.
type FormValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FormValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FormValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FormValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FormValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FormValidationError) ErrorName() string { return "FormValidationError" }

// Error satisfies the builtin error interface
func (e FormValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FormValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FormValidationError{}

// Validate checks the field values on CreateFormRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateFormRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFormRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFormRequestMultiError, or nil if none found.
func (m *CreateFormRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFormRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEventId()) < 1 {
		err := CreateFormRequestValidationError{
			field:  "EventId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := CreateFormRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 140 {
		err := CreateFormRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 140 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSchema() == nil {
		err := CreateFormRequestValidationError{
			field:  "Schema",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFormRequestValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFormRequestValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFormRequestValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUischema() == nil {
		err := CreateFormRequestValidationError{
			field:  "Uischema",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUischema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFormRequestValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFormRequestValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUischema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFormRequestValidationError{
				field:  "Uischema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFormRequestMultiError(errors)
	}

	return nil
}

// CreateFormRequestMultiError is an error wrapping multiple validation errors
// returned by CreateFormRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateFormRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFormRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFormRequestMultiError) AllErrors() []error { return m }

// CreateFormRequestValidationError is the validation error returned by
// CreateFormRequest.Validate if the designated constraints aren't met.
type CreateFormRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFormRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFormRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFormRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFormRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFormRequestValidationError) ErrorName() string {
	return "CreateFormRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFormRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFormRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFormRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFormRequestValidationError{}

// Validate checks the field values on CreateFormResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFormResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFormResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFormResponseMultiError, or nil if none found.
func (m *CreateFormResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFormResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetForm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFormResponseValidationError{
					field:  "Form",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFormResponseValidationError{
					field:  "Form",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetForm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFormResponseValidationError{
				field:  "Form",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFormResponseMultiError(errors)
	}

	return nil
}

// CreateFormResponseMultiError is an error wrapping multiple validation errors
// returned by CreateFormResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateFormResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFormResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFormResponseMultiError) AllErrors() []error { return m }

// CreateFormResponseValidationError is the validation error returned by
// CreateFormResponse.Validate if the designated constraints aren't met.
type CreateFormResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFormResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFormResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFormResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFormResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFormResponseValidationError) ErrorName() string {
	return "CreateFormResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFormResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFormResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFormResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFormResponseValidationError{}

// Validate checks the field values on ListFormsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFormsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormsRequestMultiError, or nil if none found.
func (m *ListFormsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListFormsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListFormsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for EventId

	if len(errors) > 0 {
		return ListFormsRequestMultiError(errors)
	}

	return nil
}

// ListFormsRequestMultiError is an error wrapping multiple validation errors
// returned by ListFormsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFormsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormsRequestMultiError) AllErrors() []error { return m }

// ListFormsRequestValidationError is the validation error returned by
// ListFormsRequest.Validate if the designated constraints aren't met.
type ListFormsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormsRequestValidationError) ErrorName() string { return "ListFormsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListFormsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormsRequestValidationError{}

// Validate checks the field values on ListFormsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFormsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFormsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFormsResponseMultiError, or nil if none found.
func (m *ListFormsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFormsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetForms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFormsResponseValidationError{
						field:  fmt.Sprintf("Forms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFormsResponseValidationError{
						field:  fmt.Sprintf("Forms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFormsResponseValidationError{
					field:  fmt.Sprintf("Forms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFormsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFormsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFormsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListFormsResponseMultiError(errors)
	}

	return nil
}

// ListFormsResponseMultiError is an error wrapping multiple validation errors
// returned by ListFormsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListFormsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFormsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFormsResponseMultiError) AllErrors() []error { return m }

// ListFormsResponseValidationError is the validation error returned by
// ListFormsResponse.Validate if the designated constraints aren't met.
type ListFormsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFormsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFormsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFormsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFormsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFormsResponseValidationError) ErrorName() string {
	return "ListFormsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFormsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFormsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFormsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFormsResponseValidationError{}

// Validate checks the field values on UpdateFormRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFormRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFormRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFormRequestMultiError, or nil if none found.
func (m *UpdateFormRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFormRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateFormRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateFormRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFormRequestValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFormRequestValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFormRequestValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUischema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFormRequestValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFormRequestValidationError{
					field:  "Uischema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUischema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFormRequestValidationError{
				field:  "Uischema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFormRequestMultiError(errors)
	}

	return nil
}

// UpdateFormRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateFormRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateFormRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFormRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFormRequestMultiError) AllErrors() []error { return m }

// UpdateFormRequestValidationError is the validation error returned by
// UpdateFormRequest.Validate if the designated constraints aren't met.
type UpdateFormRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFormRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFormRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFormRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFormRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFormRequestValidationError) ErrorName() string {
	return "UpdateFormRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFormRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFormRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFormRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFormRequestValidationError{}
