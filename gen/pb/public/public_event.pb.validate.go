// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/public_event.proto

package public

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SearchEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchEventsRequestMultiError, or nil if none found.
func (m *SearchEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.Page != nil {

		if m.GetPage() < 1 {
			err := SearchEventsRequestValidationError{
				field:  "Page",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.PageSize != nil {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := SearchEventsRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.MerchantId != nil {
		// no validation rules for MerchantId
	}

	if m.TitleSearch != nil {
		// no validation rules for TitleSearch
	}

	if m.SessionStartTimeFrom != nil {
		// no validation rules for SessionStartTimeFrom
	}

	if m.SessionStartTimeTo != nil {
		// no validation rules for SessionStartTimeTo
	}

	if m.LocationLat != nil {

		if val := m.GetLocationLat(); val < -90 || val > 90 {
			err := SearchEventsRequestValidationError{
				field:  "LocationLat",
				reason: "value must be inside range [-90, 90]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.LocationLng != nil {

		if val := m.GetLocationLng(); val < -180 || val > 180 {
			err := SearchEventsRequestValidationError{
				field:  "LocationLng",
				reason: "value must be inside range [-180, 180]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.LocationRadius != nil {

		if m.GetLocationRadius() < 1 {
			err := SearchEventsRequestValidationError{
				field:  "LocationRadius",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.SortBy != nil {

		if m.GetSortBy() != "" {

			if _, ok := _SearchEventsRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
				err := SearchEventsRequestValidationError{
					field:  "SortBy",
					reason: "value must be in list [session_start_time created_at]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.SortOrder != nil {

		if m.GetSortOrder() != "" {

			if _, ok := _SearchEventsRequest_SortOrder_InLookup[m.GetSortOrder()]; !ok {
				err := SearchEventsRequestValidationError{
					field:  "SortOrder",
					reason: "value must be in list [asc desc]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return SearchEventsRequestMultiError(errors)
	}

	return nil
}

// SearchEventsRequestMultiError is an error wrapping multiple validation
// errors returned by SearchEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchEventsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchEventsRequestMultiError) AllErrors() []error { return m }

// SearchEventsRequestValidationError is the validation error returned by
// SearchEventsRequest.Validate if the designated constraints aren't met.
type SearchEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchEventsRequestValidationError) ErrorName() string {
	return "SearchEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchEventsRequestValidationError{}

var _SearchEventsRequest_SortBy_InLookup = map[string]struct{}{
	"session_start_time": {},
	"created_at":         {},
}

var _SearchEventsRequest_SortOrder_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}
