// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/public_event.proto

package public

import (
	context "context"
	common "github.com/arwoosa/form-service/gen/pb/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublicEventService_SearchEvents_FullMethodName = "/event.public.PublicEventService/SearchEvents"
	PublicEventService_GetEvent_FullMethodName     = "/event.public.PublicEventService/GetEvent"
)

// PublicEventServiceClient is the client API for PublicEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicEventServiceClient interface {
	// Search public events
	SearchEvents(ctx context.Context, in *SearchEventsRequest, opts ...grpc.CallOption) (*common.EventListResponse, error)
	// Get a public event by ID (for sharing links)
	GetEvent(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*common.Event, error)
}

type publicEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicEventServiceClient(cc grpc.ClientConnInterface) PublicEventServiceClient {
	return &publicEventServiceClient{cc}
}

func (c *publicEventServiceClient) SearchEvents(ctx context.Context, in *SearchEventsRequest, opts ...grpc.CallOption) (*common.EventListResponse, error) {
	out := new(common.EventListResponse)
	err := c.cc.Invoke(ctx, PublicEventService_SearchEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicEventServiceClient) GetEvent(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*common.Event, error) {
	out := new(common.Event)
	err := c.cc.Invoke(ctx, PublicEventService_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicEventServiceServer is the server API for PublicEventService service.
// All implementations must embed UnimplementedPublicEventServiceServer
// for forward compatibility
type PublicEventServiceServer interface {
	// Search public events
	SearchEvents(context.Context, *SearchEventsRequest) (*common.EventListResponse, error)
	// Get a public event by ID (for sharing links)
	GetEvent(context.Context, *common.ID) (*common.Event, error)
	mustEmbedUnimplementedPublicEventServiceServer()
}

// UnimplementedPublicEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublicEventServiceServer struct {
}

func (UnimplementedPublicEventServiceServer) SearchEvents(context.Context, *SearchEventsRequest) (*common.EventListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEvents not implemented")
}
func (UnimplementedPublicEventServiceServer) GetEvent(context.Context, *common.ID) (*common.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedPublicEventServiceServer) mustEmbedUnimplementedPublicEventServiceServer() {}

// UnsafePublicEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicEventServiceServer will
// result in compilation errors.
type UnsafePublicEventServiceServer interface {
	mustEmbedUnimplementedPublicEventServiceServer()
}

func RegisterPublicEventServiceServer(s grpc.ServiceRegistrar, srv PublicEventServiceServer) {
	s.RegisterService(&PublicEventService_ServiceDesc, srv)
}

func _PublicEventService_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEventServiceServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicEventService_SearchEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEventServiceServer).SearchEvents(ctx, req.(*SearchEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicEventService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEventServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicEventService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEventServiceServer).GetEvent(ctx, req.(*common.ID))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicEventService_ServiceDesc is the grpc.ServiceDesc for PublicEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.public.PublicEventService",
	HandlerType: (*PublicEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchEvents",
			Handler:    _PublicEventService_SearchEvents_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _PublicEventService_GetEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/public_event.proto",
}
