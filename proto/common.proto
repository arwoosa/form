syntax = "proto3";

option go_package = "github.com/arwoosa/event/gen/pb/common";

package common;

import "google/protobuf/any.proto";
import "validate/validate.proto";

message User {
  string user_id = 1;
  string name = 2;
  string email = 3;
  string avatar = 4;
}

message ID {
  string id = 1;
}

message Response {
  string status = 1;
  int32 code = 2;
  optional string message = 3;
  google.protobuf.Any data = 4;
}

// Core Event message - shared across all services
message Event {
  string id = 1;
  string title = 2;
  string summary = 3;
  string status = 4; // draft, published, archived
  string visibility = 5; // public, private
  string cover_image_url = 6;
  Location location = 7;
  repeated Session sessions = 8;
  repeated DetailBlock detail = 9 [(validate.rules).repeated = {min_items: 0, max_items: 50}];
  repeated FAQ faq = 10;
  string created_at = 11;
  string created_by = 12;
  string updated_at = 13;
  string updated_by = 14;
}

// Location with GeoJSON Point structure
message Location {
  string name = 1 [(validate.rules).string.min_len = 1];
  string address = 2 [(validate.rules).string.min_len = 1];
  string place_id = 3 [(validate.rules).string.min_len = 1];
  GeoJSONPoint coordinates = 4 [(validate.rules).message.required = true];
}

message GeoJSONPoint {
  string type = 1 [(validate.rules).string.const = "Point"]; // Always "Point"
  repeated double coordinates = 2 [(validate.rules).repeated = {min_items: 2, max_items: 2}]; // [longitude, latitude]
}

// Session for time-based event scheduling
message Session {
  string id = 1;
  string name = 2;                                      // Session name (optional)
  optional int32 capacity = 3;                          // Capacity limit (optional, null means unlimited)
  string start_time = 4; // RFC3339 format
  string end_time = 5;   // RFC3339 format
}

// Detail block for structured content
message DetailBlock {
  string type = 1 [(validate.rules).string = {in: ["text", "image"]}];
  oneof data {
    TextData text_data = 2;
    ImageData image_data = 3;
  }
}

// Text block data
message TextData {
  string content = 1 [(validate.rules).string.max_len = 10000];
}

// Image block data
message ImageData {
  string url = 1 [(validate.rules).string = {min_len: 1, uri: true}];
  string alt = 2 [(validate.rules).string.max_len = 200];
  string caption = 3 [(validate.rules).string.max_len = 500];
}

// FAQ entry
message FAQ {
  string question = 1 [(validate.rules).string = {min_len: 1, max_len: 100}];
  string answer = 2 [(validate.rules).string = {min_len: 1, max_len: 300}];
}

// Common response messages
message EventListResponse {
  repeated Event events = 1;
  Pagination pagination = 2;
}

message Pagination {
  optional string next_page_token = 1; // for cursor-based
  optional string prev_page_token = 2; // for cursor-based
  optional bool has_next = 3;
  optional bool has_prev = 4;
  optional int32 total_count = 5;
  optional int32 current_page = 6;     // for page-based
  optional int32 total_pages = 7;      // for page-based
}
