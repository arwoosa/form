syntax = "proto3";

package form.service;

option go_package = "github.com/arwoosa/form/gen/pb/form";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "proto/common.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// FormService - Manages form templates and forms.
service FormService {
    // Creates a new form template
    rpc CreateFormTemplate(CreateFormTemplateRequest) returns (CreateFormTemplateResponse) {
        option (google.api.http) = {
            post: "/form_templates"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Console"]
        };
    }
    
    // Lists form templates with pagination
    rpc ListFormTemplates(ListFormTemplatesRequest) returns (ListFormTemplatesResponse) {
        option (google.api.http) = {
            get: "/form_templates"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Console"]
        };
    }
    
    // Gets a single form template by ID
    rpc GetFormTemplate(form.common.ID) returns (FormTemplate) {
        option (google.api.http) = {
            get: "/form_templates/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Console"]
        };
    }
    
    // Updates an existing form template
    rpc UpdateFormTemplate(UpdateFormTemplateRequest) returns (FormTemplate) {
        option (google.api.http) = {
            put: "/form_templates/{id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Console"]
        };
    }
    
    // Deletes a form template by ID
    rpc DeleteFormTemplate(form.common.ID) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/form_templates/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Console"]
        };
    }
    
    // Duplicates an existing form template
    rpc DuplicateFormTemplate(DuplicateFormTemplateRequest) returns (DuplicateFormTemplateResponse) {
        option (google.api.http) = {
            post: "/form_templates/{id}/duplicate"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Console"]
        };
    }
    
    // Creates a new form
    rpc CreateForm(CreateFormRequest) returns (CreateFormResponse) {
        option (google.api.http) = {
            post: "/forms"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Console"]
        };
    }
    
    // Lists forms with pagination
    rpc ListForms(ListFormsRequest) returns (ListFormsResponse) {
        option (google.api.http) = {
            get: "/forms"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Console"]
        };
    }
    
    // Gets a single form by ID
    rpc GetForm(form.common.ID) returns (Form) {
        option (google.api.http) = {
            get: "/forms/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Console"]
        };
    }
    
    // Updates an existing form
    rpc UpdateForm(UpdateFormRequest) returns (Form) {
        option (google.api.http) = {
            put: "/forms/{id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Console"]
        };
    }
    
    // Deletes a form by ID
    rpc DeleteForm(form.common.ID) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/forms/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Console"]
        };
    }
    
    // Gets a form by event ID for public access (frontend users)
    rpc GetPublicFormByEvent(GetPublicFormByEventRequest) returns (Form) {
        option (google.api.http) = {
            get: "/forms/public"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Public"]
        };
    }
}

// Form Template Messages
message FormTemplate {
    string id = 1;
    string name = 2;
    string merchant_id = 3;
    google.protobuf.Struct schema = 4;    // JSON Schema defining data structure and validation rules
    google.protobuf.Struct uischema = 5;  // UI Schema defining form layout and appearance
    google.protobuf.Timestamp created_at = 6;
    string created_by = 7;
    google.protobuf.Timestamp updated_at = 8;
    string updated_by = 9;
}

message CreateFormTemplateRequest {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 50}];
    google.protobuf.Struct schema = 2 [(validate.rules).message.required = true];
    google.protobuf.Struct uischema = 3 [(validate.rules).message.required = true];
}

message CreateFormTemplateResponse {
    FormTemplate template = 1;
}

message ListFormTemplatesRequest {
    int32 page = 1;                    // Optional: defaults to 1 if not provided or <= 0
    int32 page_size = 2;               // Optional: defaults to config value if not provided or <= 0
    string sort_by = 3 [(validate.rules).string = {in: ["", "name", "created_at", "updated_at"]}];    // Optional sort field
    string sort_order = 4 [(validate.rules).string = {in: ["", "asc", "desc"]}];   // Optional sort order
}

message ListFormTemplatesResponse {
    repeated FormTemplate templates = 1;
    form.common.Pagination pagination = 2;
}

message UpdateFormTemplateRequest {
    string id = 1 [(validate.rules).string.min_len = 1];
    string name = 2 [(validate.rules).string = {min_len: 1, max_len: 50}];
    google.protobuf.Struct schema = 3 [(validate.rules).message.required = true];
    google.protobuf.Struct uischema = 4 [(validate.rules).message.required = true];
}


message DuplicateFormTemplateRequest {
    string id = 1 [(validate.rules).string.min_len = 1];
}

message DuplicateFormTemplateResponse {
    FormTemplate template = 1;
}

// Form Messages
message Form {
    string id = 1;
    string event_id = 2;
    string merchant_id = 3;
    google.protobuf.Struct schema = 4;    // JSON Schema defining data structure and validation rules
    google.protobuf.Struct uischema = 5;  // UI Schema defining form layout and appearance
    google.protobuf.Timestamp created_at = 6;
    string created_by = 7;
    google.protobuf.Timestamp updated_at = 8;
    string updated_by = 9;
}

message CreateFormRequest {
    string event_id = 1 [(validate.rules).string.min_len = 1]; // required
    google.protobuf.Struct schema = 2 [(validate.rules).message.required = true];
    google.protobuf.Struct uischema = 3 [(validate.rules).message.required = true];
}

message CreateFormResponse {
    Form form = 1;
}

message ListFormsRequest {
    int32 page = 1;                    // Optional: defaults to 1 if not provided or <= 0
    int32 page_size = 2;               // Optional: defaults to config value if not provided or <= 0
    string event_id = 3;               // Optional filter by event
    string sort_by = 4 [(validate.rules).string = {in: ["", "created_at", "updated_at"]}];    // Optional sort field
    string sort_order = 5 [(validate.rules).string = {in: ["", "asc", "desc"]}];   // Optional sort order
}

message ListFormsResponse {
    repeated Form forms = 1;
    form.common.Pagination pagination = 2;
}


message UpdateFormRequest {
    string id = 1 [(validate.rules).string.min_len = 1];
    google.protobuf.Struct schema = 2;
    google.protobuf.Struct uischema = 3;
}

message GetPublicFormByEventRequest {
    string event_id = 1 [(validate.rules).string.min_len = 1];
}
